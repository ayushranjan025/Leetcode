class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> result = new ArrayList<>();

        //removing duplicates
        for (int flp = 0; flp < n; flp++) {
            if (flp > 0 && nums[flp] == nums[flp - 1]) {
                continue;
            }

        
            for (int j= flp + 1; j < n; j++) {
                if (j > flp + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }

                // Initialize two pointers for the remaining elements
                int start = j + 1;
                int end = n - 1;

                // Check all possible combinations
                while (start < end) {
                    // Calculate the sum of the four elements
                    long sum = (long) nums[flp] + nums[j] + nums[start] + nums[end];

                    if (sum == target) {
                        result.add(Arrays.asList(nums[flp], nums[j], nums[start], nums[end]));
                        start++;
                        end--;

                        while (start < end && nums[start] == nums[start - 1]) {
                            start++;
                        }

                        while (start < end && nums[end] == nums[end + 1]) {
                            end--;
                        }
                    } else if (sum < target) {
                        start++;
                    } else {
                        end--;
                    }
                }
            }
        }

        return result;
    }
}
